@use "sass:math";
@use "sass:meta";
@use "sass:string";

// This is the default html and body font-size for the base rem value.
$rem-base: 16px !default;

// STRIP UNIT
// It strips the unit of measure and returns it
@function strip-unit($num) {
  @if meta.type-of($num) != "number" {
    @error "Invalid `#{meta.type-of($num)}` type. Choose a number type instead.";
} @else if meta.type-of($num) == "number" and not math.is-unitless($num) {
    @return math.div($num, ($num * 0 + 1));
}

@return $num;
}

// Convert to rem
@function rem($value, $base-value: $rem-base) {
  $value:  calc(strip-unit($value) / strip-unit($base-value)) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// Rem calculate
@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

// Em calculate
@function em-calc($values) {
  $remValues: rem-calc($values);

  $max: length($remValues);

  @if $max == 1 { @return strip-unit(nth($remValues, 1)) * 1em; }

  $emValues: ();
  @for $i from 1 through $max {
    $emValues: append($emValues, strip-unit(nth($remValues, $i)) * 1em);
  }
  @return $emValues;
}

// Clamp size
@function clamp-size($min-size, $max-size, $min-width: 375, $max-width: 1440, $unit: vw) {
  $slope: math.div($max-size - $min-size, $max-width - $min-width);
  $slope-to-unit: $slope * 100;
  $intercept-rem: rem($min-size - $slope * $min-width);
  @if $intercept-rem == 0 {
    $intercept-rem: 0rem;
  }
  $min-size-rem: rem($min-size);
  $max-size-rem: rem($max-size);
  @return clamp(#{$min-size-rem}, #{$intercept-rem} + #{$slope-to-unit}#{$unit}, #{$max-size-rem});
}